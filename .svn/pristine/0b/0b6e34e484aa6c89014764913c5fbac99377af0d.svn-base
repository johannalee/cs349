#include "MainPanel.h"
#include "TurtleGraphics.h"
#include "Button.h"
#include "Slider.h"
#include "Label.h"
#include "A2WidgetIdentifiers.h"

using namespace cs349;

MainPanel::MainPanel()
  : Panel(MAIN_PANEL_ID)
{
  // TODO CS349: Create your entire interface here. You will need to
  // modify the provided code below to lay things out the way you like

  // Note the use of unique identifiers for each widget when they are
  // constructed. See A2WidgetIdentifiers.h and the assignment
  // specification for the identifiers you should use for each of the
  // components you create. These identifiers are used for unit tests
  // to easily identify components in the interactor tree.

  //easy to manage layout
  const int turtleX = 45;
  const int listenerX = 400;
  
  const int labelHeight = 20;
  const int labelWidth = 200;

  const int sliderWidth = 400;
  const int sliderHeight = 150;

  const int sliderY1 = 60;
  const int sliderY2 = 170;

  const int buttonY = 300;
  const int buttonSize = 50;

  //turtleGraphicsPanel
  Component* turtleGraphicsPanel = new Panel(TURTLE_GRAPHICS_PANEL_ID);
  Label* turtleGraphicsOutputLabel = new Label(TURTLE_GRAPHICS_OUTPUT_LABEL_ID, "TURTLE GRAPHICS OUTPUT");
  TurtleGraphics* turtle = new TurtleGraphics(TURTLE_GRAPHICS_WIDGET_ID);

  this->SetBounds(Rectangle(0, 0, 800, 420));
  turtleGraphicsPanel->SetBounds(Rectangle(turtleX, 0, 320, 330));

  turtleGraphicsOutputLabel->SetBounds(Rectangle(turtleX+85 , 40, labelWidth, labelHeight));
  turtleGraphicsPanel->AddComponent(turtleGraphicsOutputLabel);

  turtle->SetBounds(Rectangle(turtleX, 60, 300, 300));

  turtleGraphicsPanel->AddComponent(turtle);
  this->AddComponent(turtleGraphicsPanel);

  turtleGraphicsOutputLabel->SetVisible(true);
  turtle->SetVisible(true);
  turtleGraphicsPanel->SetVisible(true);

  // TODO CS349: Add other initialization code here
// TODO CS349

  //playbackPanel
  Component* playbackPanel = new Panel(PLAYBACK_PANEL_ID);
  Label* playbackOutputLabel = new Label(PLAYBACK_OUTPUT_LABEL_ID, "PLAYBACK RATE");
  Slider* playbackSlider = new Slider(PLAYBACK_SLIDER_ID, Slider::HORIZONTAL_SLIDER);
  playbackSlider->SetUnit(Slider::RATE);

  playbackPanel->SetBounds(Rectangle(listenerX, 0, 350, 200));
  playbackOutputLabel->SetBounds(Rectangle(listenerX, sliderY1, labelWidth, labelHeight));
  playbackSlider->SetBounds(Rectangle(listenerX, (sliderY1+15), sliderWidth, sliderHeight));

  playbackPanel->AddComponent(playbackOutputLabel);
  playbackPanel->AddComponent(playbackSlider);
  this->AddComponent(playbackPanel);

  playbackSlider->SetVisible(true);
  playbackOutputLabel->SetVisible(true);
  playbackPanel->SetVisible(true);

  //currentTurtleStepPanel
  Component* currentTurtleStepPanel = new Panel(CURRENT_TURTLE_STEP_PANEL_ID);
  Label* currentTurtleStepLabel = new Label(CURRENT_TURTLE_STEP_LABEL_ID, "CURRENT TURTLE STEP");
  Slider* currentTurtleStepSlider = new Slider(CURRENT_TURTLE_STEP_SLIDER_ID, Slider::HORIZONTAL_SLIDER);
  currentTurtleStepSlider->SetUnit(Slider::STEP);

  currentTurtleStepLabel->SetBounds(Rectangle(listenerX, sliderY2, labelWidth, labelHeight));
  currentTurtleStepSlider->SetBounds(Rectangle(listenerX, (sliderY2+15), sliderWidth, sliderHeight));

  currentTurtleStepPanel->AddComponent(currentTurtleStepLabel);
  currentTurtleStepPanel->AddComponent(currentTurtleStepSlider);
  this->AddComponent(currentTurtleStepPanel);

  currentTurtleStepLabel->SetVisible(true);
  currentTurtleStepSlider->SetVisible(true);
  currentTurtleStepPanel->SetVisible(true);

  // buttonPanel
  Component* buttonPanel = new Panel(BUTTON_PANEL_ID);

  Button* goToStartButton = new Button(GO_TO_START_BUTTON_ID, "goToStartButton");
  goToStartButton->SetButtonType(Button::TO_START);

  Button* previousFrameButton = new Button(PREVIOUS_FRAME_BUTTON_ID, "previousFrameButton");
  previousFrameButton->SetButtonType(Button::BACKWARD);

  Button* playButton = new Button(PLAY_BUTTON_ID, "playButton");
  playButton->SetButtonType(Button::PLAY);

  Button* nextFrameButton = new Button(NEXT_FRAME_BUTTON_ID, "nextFrameButton");
  nextFrameButton->SetButtonType(Button::FORWARD);

  Button* goToEndButton = new Button(GO_TO_END_BUTTON_ID, "goToEndButton");
  goToEndButton->SetButtonType(Button::TO_END);
  

  goToStartButton->SetBounds(Rectangle(listenerX, buttonY, (buttonSize+20), buttonSize));
  buttonPanel->AddComponent(goToStartButton);

  previousFrameButton->SetBounds(Rectangle((listenerX+70), buttonY, buttonSize, buttonSize));
  buttonPanel->AddComponent(previousFrameButton);

  playButton->SetBounds(Rectangle((listenerX+145), (buttonY-10), buttonSize, (buttonSize+20)));
  buttonPanel->AddComponent(playButton);
//620
  nextFrameButton->SetBounds(Rectangle((listenerX+240), buttonY, buttonSize, buttonSize));
  buttonPanel->AddComponent(nextFrameButton);
//680
  goToEndButton->SetBounds(Rectangle((listenerX+300), buttonY, (buttonSize+20), buttonSize));
  buttonPanel->AddComponent(goToEndButton);

  this->AddComponent(buttonPanel);
  goToStartButton->SetVisible(true);
  previousFrameButton->SetVisible(true);
  playButton->SetVisible(true);
  nextFrameButton->SetVisible(true);
  goToEndButton->SetVisible(true);
  buttonPanel->SetVisible(true);

  // Some simple operations to show the turtle when starting up
  // This is an entirely random set of instructions
  // Once started up, try typing this into the console:
  // (turtle-star (find-turtle-graphics-widget) 300 23)
  // The 300 argument is the length of the edges of the star, in
  // pixels
  // The 23 argument is the number of points for the star
  turtle->RotateInDegrees(45);
  turtle->Forward(100, true);
  turtle->RotateInDegrees(135);
  turtle->Forward(65, true);
  turtle->RotateInDegrees(135);
  turtle->Forward(100, true);
  turtle->RotateInDegrees(150);
  turtle->Forward(30, true);
}
