#include "Slider.h"
#include "XWindow.h"
#include "Logging.h"
#include <algorithm>

using namespace cs349;
using namespace std;

Slider::Slider(const string & name, OrientationType orientation)
  : Component(name)
{
  lowerBound = 0;
  upperBound = 0;
  curValue = 0;
  lowerBoundLabel = "";
  upperBoundLabel = "";
  thumbLabel = "";
  this->orientation = orientation;

// TODO CS349
  unit = DEFAULT;
}

void Slider::AddValueListener(ValueListener* l) {
// TODO CS349
}

void Slider::RemoveValueListener(ValueListener* l) {
// TODO CS349
}

int Slider::GetMinimum() const {
  return lowerBound;
}

int Slider::GetMaximum() const {
  return upperBound;
}

int Slider::GetCurValue() const {
  return curValue;
}

//Returns the measuring unit of the slider
Slider::Unit Slider::GetUnit() const {
  return this->unit;
}

//Sets the measuring unit of the slider
void Slider::SetUnit(Unit unit) {
  this->unit = unit;
}

void Slider::SetMinimum(int minValue) {
// TODO CS349
}

void Slider::SetMaximum(int maxValue) {
// TODO CS349
}

void Slider::SetCurValue(int value) {
// TODO CS349
}

Slider::OrientationType Slider::GetOrientation() const {
  return orientation;
}

void Slider::SetOrientation(OrientationType orientation) {
  this->orientation = orientation;
  this->Repaint();
}

void Slider::PaintComponent(Graphics* g) {
// TODO CS349
  int lineX = 30;
  int lineY = 10;
  int lineWidth = 280;
  int textY = lineY+40;
  int thumbWidth = 7;
  int thumbHeight = 20;
  int posX = curValue + lineX;

  g->SetForegroundColor(0x000000);
  g->FillRect(Rectangle(0, 0, 400, 150));

  g->SetForegroundColor(0xFFFFFF);

  string u1, u2, u3;

  switch(this->GetUnit()){
    case RATE:
      u1 = "0.1x";  u2 = "1x";  u3 = "10x";
    break;

    case STEP:
      u1 = " 0";  u2 = "100";  u3 = "200";
    break;

    default:
      LOG_WARN << "Warning: Set your unit of measurement for the slider";
  }


  g->DrawLine(Point(lineX, lineY), Point(lineX+lineWidth, lineY));

  g->DrawText(Point((lineX-7), textY), u1);
  g->DrawText(Point((lineX+(lineWidth/2)), textY), u2);
  g->DrawText(Point((lineX+lineWidth-7), textY), u3);

  //thumb
  g->FillRect(Rectangle(posX, (lineY-(thumbHeight/2)), thumbWidth, thumbHeight));

}

string Slider::GetLowerBoundLabel() const {
  return lowerBoundLabel;
}

string Slider::GetUpperBoundLabel() const {
  return upperBoundLabel;
}

string Slider::GetThumbLabel() const {
  return thumbLabel;
}

void Slider::SetLowerBoundLabel(const string & label) {
  this->lowerBoundLabel = label;
  this->Repaint();
}

void Slider::SetUpperBoundLabel(const string & label) {
  this->upperBoundLabel = label;
  this->Repaint();
}

void Slider::SetThumbLabel(const string & label) {
  this->thumbLabel = label;
  this->Repaint();
}

// TODO CS349: Implement any other methods needed here
// TODO CS349


