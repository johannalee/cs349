/**
 * CS349 Winter 2014
 * Assignment 4 Demo Code
 * Jeff Avery
 */
package com.example.a4;
import android.graphics.*;
import android.util.Log;
import java.lang.Math;

/**
 * Class that represents a Fruit. Can be split into two separate fruits.
 */
public class Fruit {
    private Path path = new Path();
    private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
    private Matrix transform = new Matrix();

    /**
     * A fruit is represented as Path, typically populated 
     * by a series of points 
     */
    Fruit(float[] points) {
        init();
        this.path.reset();
        this.path.moveTo(points[0], points[1]);
        for (int i = 2; i < points.length; i += 2) {
            this.path.lineTo(points[i], points[i + 1]);
        }
        this.path.moveTo(points[0], points[1]);
    }

    Fruit(Region region) {
        init();
        this.path = region.getBoundaryPath();
    }

    Fruit(Path path) {
        init();
        this.path = path;
    }

    private void init() {
        this.paint.setColor(Color.BLUE);
        this.paint.setStrokeWidth(5);
    }

    /**
     * The color used to paint the interior of the Fruit.
     */
    public int getFillColor() { return paint.getColor(); }
    public void setFillColor(int color) { paint.setColor(color); }

    /**
     * The width of the outline stroke used when painting.
     */
    public double getOutlineWidth() { return paint.getStrokeWidth(); }
    public void setOutlineWidth(float newWidth) { paint.setStrokeWidth(newWidth); }

    /**
     * Concatenates transforms to the Fruit's affine transform
     */
    public void rotate(float theta) { transform.postRotate(theta); }
    public void scale(float x, float y) { transform.postScale(x, y); }
    public void translate(float tx, float ty) { transform.postTranslate(tx, ty); }

    /**
     * Returns the Fruit's affine transform that is used when painting
     */
    public Matrix getTransform() { return transform; }

    /**
     * The path used to describe the fruit shape.
     */
    public Path getTransformedPath() {
        Path originalPath = new Path(path);
        Path transformedPath = new Path();
        originalPath.transform(transform, transformedPath);
        return transformedPath;
    }

    /**
     * Paints the Fruit to the screen using its current affine
     * transform and paint settings (fill, outline)
     */
    public void draw(Canvas canvas) {
        // TODO BEGIN CS349
        // tell the shape to draw itself using the matrix and paint parameters
    	canvas.drawPath(getTransformedPath(), this.paint);
        // TODO END CS349
    }

    /**
     * Tests whether the line represented by the two points intersects
     * this Fruit.
     */
    public boolean intersects(PointF p1, PointF p2) {
        // TODO BEGIN CS349
        // rotate and flatten points passed in 
    	Path cutline = new Path();
    	cutline.moveTo(p1.x, (p1.y-1));
    	cutline.lineTo(p2.x, (p2.y-1));
    	cutline.lineTo(p2.x, (p2.y+1));
    	cutline.lineTo(p1.x, (p1.y+1));
    	cutline.lineTo(p1.x, (p1.y-1));

    	// calculate angle between points
    	Matrix newtransform = new Matrix();
    	newtransform.postRotate(-getThetaWrtXaxis(p1, p2), p1.x, p1.y);
    	
    	cutline.transform(newtransform);

        Region cutlineRegion = new Region();
    	cutlineRegion.setPath(cutline, new Region(0, 0, 500, 800));
    	
        // rotate path and create region for comparison
    	Path newFruitPath = new Path();
    	this.getTransformedPath().transform(newtransform, newFruitPath);
    	
    	Region clonedRegion = new Region();
    	clonedRegion.setPath(newFruitPath, new Region(0, 0, 500, 800));
    	boolean valid = clonedRegion.op(cutlineRegion, Region.Op.INTERSECT);
    	if(valid){
    		return true;
    	}
    	
        // TODO END CS349
        return false;
    }

    /**
     * Returns the angle of a line w.r.t the x-axis.
     */
    public float getThetaWrtXaxis(PointF p1, PointF p2){
        float angle1 = (float) Math.atan2((p1.y - p2.y), (p1.x - p2.x));
        float angle2 = (float) Math.atan2(0, -1);

        return angle1 - angle2;
    }
    
    /**
     * Returns whether the given point is within the Fruit's shape.
     */
    public boolean contains(PointF p1) {
        Region region = new Region();
        boolean valid = region.setPath(getTransformedPath(), new Region(0, 0, 500, 800));
        return valid && region.contains((int) p1.x, (int) p1.y);
    }

    /**
     * This method assumes that the line represented by the two points
     * intersects the fruit. If not, unpredictable results will occur.
     * Returns two new Fruits, split by the line represented by the
     * two points given.
     */
    public Fruit[] split(PointF p1, PointF p2) {
    	Path topPath = null;
    	Path bottomPath = null;
    	
    	//cutline should go through the fruit completely otherwise no split
    	if((this.contains(p1) && !this.contains(p2)) || (this.contains(p2) && !this.contains(p1))){
    		return new Fruit[0];
    	}
    	
    	// TODO BEGIN CS349
    	Path cutline = new Path();
    	cutline.moveTo(p1.x, (p1.y-1));
    	cutline.lineTo(p2.x, (p2.y-1));
    	cutline.lineTo(p2.x, (p2.y+1));
    	cutline.lineTo(p1.x, (p1.y+1));
    	cutline.lineTo(p1.x, (p1.y-1));

        Region cutlineRegion = new Region();
    	cutlineRegion.setPath(cutline, new Region(0, 0, 500, 800));

    	// calculate angle between points
    	Matrix newtransform = new Matrix();
    	newtransform.postRotate(-getThetaWrtXaxis(p1, p2), p1.x, p1.y);

        // rotate path and create region for comparison
    	Path newFruitPath = new Path();
    	this.getTransformedPath().transform(newtransform, newFruitPath);
    	
    	Region clonedRegion = new Region();
    	clonedRegion.setPath(newFruitPath, new Region(0, 0, 500, 800));
    	
    	Rect upperRect = clonedRegion.getBounds();
    	
    	//if one of the split piece is too small then no split
    	double pieceSize = (upperRect.top - p1.y)/(upperRect.top - upperRect.bottom);
    	if(pieceSize < 0.2 || 0.8 < pieceSize){
    		return new Fruit[0];
    	}

    	newtransform.postRotate(getThetaWrtXaxis(p1, p2), p1.x, p1.y);
    	
    	clonedRegion.setPath(newFruitPath, new Region(upperRect.left, upperRect.top, upperRect.right, (int) p1.y));
    	topPath = clonedRegion.getBoundaryPath();
    	
    	clonedRegion.setPath(newFruitPath, new Region(upperRect.left, (int)p1.y, upperRect.right, upperRect.bottom));
    	bottomPath = clonedRegion.getBoundaryPath();
    	
        // TODO END CS349
        if (topPath != null && bottomPath != null) {
        	Log.i("Hi","HERE");
           return new Fruit[] { new Fruit(topPath), new Fruit(bottomPath) };
        }
    	Log.i("DIDnt","get there");
        return new Fruit[0];
    }
}
